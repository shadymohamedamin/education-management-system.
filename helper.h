/*
 Boost Software License - Version 1.0 - August 17th, 2003

 Permission is hereby granted, free of charge, to any person or organization
 obtaining a copy of the software and accompanying documentation covered by
 this license (the "Software") to use, reproduce, display, distribute,
 execute, and transmit the Software, and to prepare derivative works of the
 Software, and to permit third-parties to whom the Software is furnished to
 do so, all subject to the following:

 The copyright notices in the Software and this entire statement, including
 the above license grant, this restriction and the following disclaimer,
 must be included in all copies of the Software, in whole or in part, and
 all derivative works of the Software, unless such copies or derivative
 works are solely in the form of machine-executable object code generated by
 a source language processor.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 DEALINGS IN THE SOFTWARE.
 */

#ifndef HELPER_H_
#define HELPER_H_

#include <cmath>
#include <cassert>
#include <algorithm>
#include <string>
#include <sstream>
#include <memory>
#include <vector>
using std::vector;
using std::string;
using std::ostringstream;
using std::shared_ptr;

#include "course.h"

namespace Faculty {

struct Helper {
  static double Probability();
  /*
   * Read an integer from the stream and do necessary validations.
   *
   * @param low the minimum expected value
   * @param high the maximum expected value
   *
   * @return: integer read from cin stream validated again low and high ranges
   */
  static int ReadInt(int low, int high);

  /*
   * Convert integer to string and append zeros to have the given length
   */
  static string ToString(int val, int length);

  static int RunMenu(vector<string> &menu);

  // Let's declare/implement template methods here

  /*
   * Given a vector of some type, return a random subset of it.
   */
  template<typename Type>
  static vector<Type> GetRandomSubset(const vector<Type> &vec_data) {
    vector<Type> retrunVec;

    for (auto element : vec_data) {
      if (1.0 * rand() / RAND_MAX > 0.7)
        retrunVec.push_back(element);
    }
    return retrunVec;
  }

  /*
   * Given a vector of some type, return a random subset of it of given minimum length.
   */
  template<typename Type>
  static vector<Type> GetRandomSubset(const vector<Type> &vec_data, int min_length) {
    assert((int )vec_data.size() >= min_length);

    vector<int> indices;

    for (size_t i = 0; i < vec_data.size(); ++i)
      indices.push_back(i);

    // now indices = 0 1 2 ... n-1

    std::random_shuffle(indices.begin(), indices.end());

    // now indices is some random permutation

    vector<Type> retrunVec;

    for (int i = 0; i < min_length; ++i)
      retrunVec.push_back(vec_data[indices[i]]);

    return retrunVec;
  }

  template<typename Type>
  static void RemoveElement(vector<shared_ptr<Type>> &vec_data, shared_ptr<Type> element) {
    for (int i = 0; i < (int) vec_data.size(); ++i) {
      if (vec_data[i] == element) {
        vec_data.erase(vec_data.begin() + i);
        --i;
      }
    }
  }

};

}

#endif /* HELPER_H_ */
